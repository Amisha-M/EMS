plugins {
	id 'java'
    id 'scala'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
    id 'io.gatling.gradle' version '3.11.5'
    id "org.openapi.generator" version "7.7.0"
}

group = 'com.ems'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
//    annotationProcessor 'org.projectlombok:lombok'
    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    // Spring Boot Test (includes Spring Test, JUnit, AssertJ, Hamcrest, etc.)
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    //Junit5 & Mockito
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
    testImplementation 'org.mockito:mockito-core:4.8.1'
    //mapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Cucumber
    testImplementation 'io.cucumber:cucumber-java:7.18.1'
    testImplementation 'io.cucumber:cucumber-spring:7.18.1'
    testImplementation 'io.cucumber:cucumber-junit:7.18.1'
    //suite
    testImplementation 'org.junit.platform:junit-platform-suite-engine:1.10.3'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0' // For JUnit 4 runner
 	//Jaxb
	implementation 'org.eclipse.persistence:eclipselink:4.0.4'
    // EclipseLink MOXy for JSON binding
    implementation 'org.eclipse.persistence:org.eclipse.persistence.moxy:4.0.4'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    // Implementation of Jakarta JSON API
    implementation 'org.glassfish:jakarta.json:2.0.1'
    //Gatling
    //testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.9.5'
    //testImplementation 'io.gatling:gatling-test-framework:3.9.5'
    testImplementation 'io.gatling.highcharts:gatling-charts-highcharts:3.11.5'
    testImplementation 'io.gatling:gatling-core:3.11.5'
    testImplementation 'io.gatling:gatling-http:3.11.5'
    // Scala-specific dependencies
    implementation 'org.scala-lang:scala-library:2.13.14'
    //Spring Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
//    implementation 'org.springframework.batch:spring-batch-core:5.0.0'
    testImplementation 'org.springframework.batch:spring-batch-test'
    // CSV File Handling
    implementation 'org.springframework.batch:spring-batch-core'
    implementation 'org.apache.commons:commons-csv:1.11.0'
    //integration between spring-boot and swagger-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

//    implementation 'io.swagger.core.v3:swagger-annotations:2.2.11'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
}

openApiGenerate {
    generatorName = "spring" // You can use other generators if needed
    inputSpec = "$rootDir/src/main/resources/openapi/api-docs.json" // Path to your OpenAPI spec file from Application 2
    outputDir = "$buildDir/generated" // The output directory for generated code
    apiPackage = "com.ems.api" // Package name for generated API interfaces
    modelPackage = "com.ems.model" // Package name for generated models
    configOptions = [
            dateLibrary: "java8" // Use Java 8 date types
    ]
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // Handle duplicate entries
}

tasks.named('test') {
	useJUnitPlatform()
}


